{"version":3,"sources":["components/Inputbox.js","components/Navbar.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Inputbox","props","useState","text","setText","className","id","value","rows","onChange","e","target","type","onClick","newText","toUpperCase","showAlert","toLowerCase","sentences","split","finalop","forEach","s","strLen","length","slice","join","cpyTxt","document","getElementById","select","navigator","clipboard","writeText","Navbar","class","mode","href","role","toggleMode","style","for","Alert","alert","msg","App","setmode","setalert","setTimeout","boxip","body","backgroundColor","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5cfd59ac.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nexport default function Inputbox(props) {\r\n    // const txtbox=document.getElementById(\"myBox\");\r\n    // const convertToUpper=()=>{\r\n    //     // console.log(text.toUpperCase())\r\n    //     txtbox.value=txtbox.value.toUpperCase();\r\n    // }\r\n    const convertToUpper=()=>{\r\n        // console.log(text.toUpperCase())\r\n        var newText=text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"success\",\"Yay! converted to upper case\");\r\n    }\r\n    const convertToLower=()=>{\r\n        // console.log(text.toUpperCase())\r\n        var newText=text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"success\",\"Yay! converted to lower case\");\r\n    }\r\n    const editTextbox=(e)=>{\r\n        setText(e.target.value);\r\n    }\r\n    const [text, setText] = useState(\"\");\r\n    const clearData=()=>{\r\n        setText(\"\");\r\n        props.showAlert(\"success\",\"Yay! Cleared text\");\r\n    }\r\n    const capitalfirst=()=>{\r\n        let sentences=text.split(\".\");\r\n        let finalop=\"\";\r\n        // console.log(sentences);\r\n        sentences.forEach((s)=>{\r\n            const strLen=s.length;\r\n\r\n            if(strLen){\r\n                if(s[0]===\" \" && strLen>=2){\r\n                    // s[1]=s[1].toUpperCase();\r\n                    finalop+=s[0]+s[1].toUpperCase()+s.slice(2)+\".\";\r\n                    // console.log(s[0]);\r\n                }else{\r\n                    // s[0]=s[0].toLowerCase();\r\n                    finalop+=s[0].toUpperCase()+s.slice(1)+\".\";\r\n                }\r\n\r\n            // s[0].toUpperCase();\r\n            // finalop+=s;\r\n            }\r\n        })\r\n        // console.log(finalop);\r\n        setText(finalop);\r\n        props.showAlert(\"success\",\"Yay! Set all fist letter capital\");\r\n    }\r\n    const copyData=()=>{\r\n        const cpyTxt=document.getElementById(\"myBox\");\r\n        cpyTxt.select();\r\n        navigator.clipboard.writeText(cpyTxt.value);\r\n        props.showAlert(\"success\",\"Yay! copied to clipboad\");\r\n    }\r\n    const removeSpace=()=>{\r\n        let newText=text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"success\",\"Yay! removed all extra spaces\");\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"my-3\"  >\r\n                <textarea className=\"form-control\" id=\"myBox\" value={text} rows=\"8\" onChange={editTextbox} ></textarea>\r\n                {/* <textarea className=\"form-control\" id=\"myBox\"  rows=\"3\"  ></textarea> */}\r\n\r\n            </div>\r\n            <button type=\"button\" className=\"btn btn-primary mx-1 my-2\" onClick={convertToUpper}>ToUppercase</button>\r\n            <button type=\"button\" className=\"btn btn-primary mx-1 my-2\" onClick={convertToLower}>ToLowercase</button>\r\n            <button type=\"button\" className=\"btn btn-primary mx-1 my-2\" onClick={capitalfirst}>Capital first letter</button>\r\n            <button type=\"button\" className=\"btn btn-primary mx-1 my-2\" onClick={removeSpace}>Remove Extra Space</button>\r\n            <button type=\"button\" className=\"btn btn-primary mx-1 my-2\" onClick={copyData}>Copy</button>\r\n            <button type=\"button\" className=\"btn btn-primary mx-1 my-2\" onClick={clearData}>Clear</button>\r\n            <h1>Text Summary</h1>\r\n            <p>total number of words {text.length===0?0:text.split(' ').length} and total number of letters are {text.length}</p>\r\n            <p>{text.length===0?0:text.split(' ').length/150} Minutes read</p>\r\n            <h1>Preview</h1>\r\n            <p>{text}</p>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <>\r\n            <nav class={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <a class=\"navbar-brand\" href=\"/\">TextUtility</a>\r\n                <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span class=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n\r\n                <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul class=\"navbar-nav mr-auto\">\r\n                        <li class=\"nav-item active\">\r\n                            <a class=\"nav-link\" href=\"/\">Home <span class=\"sr-only\">(current)</span></a>\r\n                        </li>\r\n                        <li class=\"nav-item\">\r\n                            <a class=\"nav-link\" href=\"/\">About</a>\r\n                        </li>\r\n                        <li class=\"nav-item\">\r\n                            <a class=\"nav-link\" href=\"/\">Contact us</a>\r\n                        </li>\r\n\r\n                    </ul>\r\n                    <form class=\"form-inline my-2 my-lg-0\">\r\n                    <div class=\"form-check form-switch\">\r\n                    <input class=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode}/>\r\n                    <label class=\"form-check-label\" style={{'color':props.mode==='light'?'black':'white'}} for=\"flexSwitchCheckDefault\">Enable dark mode</label>\r\n                    </div>\r\n                    </form>\r\n                </div>\r\n            </nav>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    // console.log(props.alert.type)\r\n    return (\r\n        props.alert && <div>\r\n             <div class={`alert  alert-${props.alert.type}`} role=\"alert\">\r\n            <strong>{props.alert.msg}</strong>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import About from \"./components/About\";\nimport Inputbox from \"./components/Inputbox\";\nimport Navbar from \"./components/Navbar\";\nimport { useState } from 'react'\nimport Alert from \"./components/Alert\";\n\nfunction App() {\n  const [mode, setmode] = useState(\"light\");\n  const toggleMode = () => {\n    const boxip = document.getElementById(\"myBox\")\n    if (mode === 'light') {\n      setmode(\"dark\");\n      showAlert(\"success\",\"dark mode enable\");\n\n      document.body.style.backgroundColor = \"#212529\";\n      document.body.style.color = \"white\";\n      boxip.style.backgroundColor = \"grey\";\n      boxip.style.color = \"white\";\n\n\n\n    }\n    else {\n      setmode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      document.body.style.color = \"black\";\n      boxip.style.backgroundColor = \"white\";\n      boxip.style.color = \"black\";\n      showAlert(\"success\",\"light mode enable\");\n\n    }\n  }\n\n  const [alert, setalert] = useState(null);\n\n  const showAlert=(type,msg)=>{\n    setalert({\n      msg:msg,\n      type:type\n    })\n    setTimeout(() => {\n      setalert(null);\n    }, 1500);\n\n  }\n  return (\n    <>\n      <Navbar mode={mode} toggleMode={toggleMode}  showAlert={showAlert}/>\n      <Alert alert={alert} />\n      <div className=\"container\">\n        <Inputbox showAlert={showAlert} />\n        {/* <About/> */}\n\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}